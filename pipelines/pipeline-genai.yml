---
# YAML anchors
s3_credentials: &s3_credentials
  access_key_id: ((s3_access_key_id))
  secret_access_key: ((s3_secret_access_key))
  endpoint: ((s3_endpoint))
  region_name: ((s3_region_name))
  skip_ssl_verification: true
  use_path_style: true

http_resource: &http_resource
  type: http-resource
  source:
    insecure: true

upload_task: &upload_task
  image: platform-automation-vsphere-image
  file: platform-automation-tasks/tasks/upload-product.yml
  params:
    ENV_FILE: body

stage_task: &stage_task
  image: platform-automation-vsphere-image
  file: platform-automation-tasks/tasks/stage-product.yml
  params:
    ENV_FILE: body

configure_task: &configure_task
  image: platform-automation-vsphere-image
  file: platform-automation-tasks/tasks/configure-product.yml
  params:
    CONFIG_FILE: body
    ENV_FILE: body

resource_types:
- name: http-resource
  type: docker-image
  source:
    repository: "harbor.elasticsky.cloud/library/jgriff/http-resource"
    tag: 'latest'
    insecure: true
    insecure_registries: [ "harbor.elasticsky.cloud" ]

# - name: http-resource
#   type: docker-image
#   source:
#     repository: jgriff/http-resource
#     # this works when provided with a username and password:

resources:
# S3 Resources
- name: platform-automation-tasks
  type: s3
  source:
    <<: *s3_credentials
    bucket: binaries
    regexp: platform-automation-tasks-(.*).zip

- name: platform-automation-vsphere-image
  type: s3
  source:
    <<: *s3_credentials
    bucket: binaries
    regexp: vsphere-platform-automation-image-(.*).tar.gz

- name: genai-product
  type: s3
  source:
    <<: *s3_credentials
    bucket: tiles
    regexp: genai-(.*).pivotal

# HTTP Resources
- name: env
  <<: *http_resource
  source:
    url: ((http_config_env))

- name: config-genai
  <<: *http_resource
  source:
    url: ((http_config_genai))

jobs:
- name: start-genai
  plan:
  - get: platform-automation-vsphere-image
    params:
      unpack: true
  - get: env
    #passed: [ apply-changes-phase-one ]
  - task: validate-config
    image: platform-automation-vsphere-image
    config:
      platform: linux
      inputs:
      - name: env
      run:
        path: sh
        args:
        - -exc
        - |
          echo "Starting GenAI deployment phase"

- name: genai
  serial: false
  serial_groups: [ phase_two ]
  build_log_retention:
    builds: 1
  plan:
  - get: genai-product
  - get: config-genai
  - get: env
    passed: [ start-genai ]
    trigger: true
  - get: platform-automation-vsphere-image
    params:
      unpack: true
  - get: platform-automation-tasks
    params:
      unpack: true

  - task: upload-product
    <<: *upload_task
    input_mapping:
      product: genai-product
      config: config-genai
      env: env

  - task: stage-product
    <<: *stage_task
    input_mapping:
      product: genai-product
      env: env

  - task: configure-product
    <<: *configure_task
    input_mapping:
      config: config-genai
      env: env

  - task: cleanup
    image: platform-automation-vsphere-image
    config:
      platform: linux
      inputs:
      - name: genai-product
      run:
        path: sh
        args:
        - -exc
        - |
          rm -rf genai-product/*

- name: apply-changes-genai
  serial: true
  build_log_retention:
    builds: 1
  plan:
  - get: env
    passed: [ genai ]
    trigger: true
  - get: platform-automation-vsphere-image
    params:
      unpack: true
  - get: platform-automation-tasks
    params:
      unpack: true

  - task: apply-product-changes
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      env: env
    params:
      ENV_FILE: body
      SELECTIVE_DEPLOY_PRODUCTS: "genai"
