---
# YAML anchors
s3_credentials: &s3_credentials
  access_key_id: ((s3_access_key_id))
  secret_access_key: ((s3_secret_access_key))
  endpoint: ((s3_endpoint))
  region_name: ((s3_region_name))
  skip_ssl_verification: true
  use_path_style: true

http_resource: &http_resource
  type: http-resource
  source:
    insecure: true

resource_types:
- name: http-resource
  type: docker-image
  source:
    repository: jgriff/http-resource

resources:
- name: platform-automation-tasks
  type: s3
  source:
    <<: *s3_credentials
    bucket: binaries
    regexp: platform-automation-tasks-(.*).zip

- name: platform-automation-vsphere-image
  type: s3
  source:
    <<: *s3_credentials
    bucket: binaries
    regexp: vsphere-platform-automation-image-(.*).tar.gz

- name: env
  <<: *http_resource
  source:
    url: ((http_config_env))

- name: config-srt
  <<: *http_resource
  source:
    url: ((http_config_srt))

jobs:
- name: cf-small-footprint
  plan:
  - get: env
  - get: config-srt
    # - get: srt-product
    #trigger: true
    #- get: stemcell
  - get: platform-automation-vsphere-image
    params:
      unpack: true
  - get: platform-automation-tasks
    params:
      unpack: true

  # - task: generate-cert
  #   image: platform-automation-vsphere-image
  #   file: platform-automation-tasks/tasks/generate-certificate.yml
  #   input_mapping:
  #     env: env
  #   params:
  #     DOMAINS: "*.sys.elasticsky.cloud,*.apps.elasticsky.cloud,*.login.sys.elasticsky.cloud,*.uaa.sys.elasticsky.cloud"
  #     ENV_FILE: body
  #   output_mapping:
  #     certificate: cert-srt

  - task: create-certificate-vars
    image: platform-automation-vsphere-image
    config:
      platform: linux
      inputs:
      #- name: certificate
      - name: env
      params:
        DOMAINS: ((certificate_domains))
        ENV_FILE: body
      outputs:
      - name: vars
      run:
        path: sh
        args:
        - -c
        - |
          echo "generating cert" for ${DOMAINS}
          #om --env env/body generate-certificate -d "${DOMAINS}" > /tmp/certificate.json
          om --env env/body generate-certificate -d "${DOMAINS}" | tee >(jq -r .certificate > /tmp/wildcard.pem) >(jq -r .key > /tmp/wildcard.key)
          om interpolate -c /tmp/certificate.json --path /certificate > certificate/certificate.pem
          om interpolate -c /tmp/certificate.json --path /key > certificate/privatekey.pem
          echo "wildcard-cert-pem: |" > vars/certificate-vars.yml
          sed 's/^/  /' /tmp/wildcard.pem >> vars/certificate-vars.yml
          echo "wildcard-key-pem: |" >> vars/certificate-vars.yml
          sed 's/^/  /' /tmp/wildcard.key >> vars/certificate-vars.yml

  - task: configure-product
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/configure-product.yml
    params:
      CONFIG_FILE: body
      ENV_FILE: body
      VARS_FILES: vars/certificate-vars.yml

    input_mapping:
      config: config-srt
      env: env
      vars: vars #/certificate-vars.yml
