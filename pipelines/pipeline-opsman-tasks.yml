---
# YAML anchors
s3_credentials: &s3_credentials
  access_key_id: ((s3_access_key_id))
  secret_access_key: ((s3_secret_access_key))
  endpoint: ((s3_endpoint))
  region_name: ((s3_region_name))
  skip_ssl_verification: true
  use_path_style: true

http_resource: &http_resource
  type: http-resource
  source:
    insecure: true

resource_types:
- name: http-resource
  type: docker-image
  source:
    repository: "harbor.elasticsky.cloud/library/jgriff/http-resource"
    tag: 'latest'
    insecure: true
    insecure_registries: [ "harbor.elasticsky.cloud" ]

# - name: http-resource
#   type: docker-image
#   source:
#     repository: jgriff/http-resource
#     # this works when provided with a username and password:

resources:
# S3 Resources
- name: platform-automation-tasks
  type: s3
  source:
    <<: *s3_credentials
    bucket: binaries
    regexp: platform-automation-tasks-(.*).zip

- name: platform-automation-vsphere-image
  type: s3
  source:
    <<: *s3_credentials
    bucket: binaries
    regexp: vsphere-platform-automation-image-(.*).tar.gz

# HTTP Resources
- name: env
  <<: *http_resource
  source:
    url: ((http_config_env))

- name: opsman-ssh-key
  <<: *http_resource
  source:
    url: ((http_opsman_ssh_key))
jobs:

- name: run-on-opsman
  serial: true
  serial_groups: [ core ]
  build_log_retention:
    builds: 2
  plan:
  - get: env
  - get: opsman-ssh-key
  - get: platform-automation-vsphere-image
    params:
      unpack: true
  - get: platform-automation-tasks
    params:
      unpack: true

  - task: commands
    image: platform-automation-vsphere-image
    config:
      platform: linux
      inputs:
      - name: env
      - name: opsman-ssh-key
      params:
        ENV_FILE: body
      run:
        path: bash
        args:
        - -c
        - |
          set -eux
          OPSMAN_SSH_KEY="opsman-ssh-key/body"
          OPSMAN_HOSTNAME=$(grep "^target:" env/"${ENV_FILE}" | sed "s/^target: *['\"]*//" | sed "s/['\"]* *$//" | sed "s|https*://||")

          command="sudo apt-get update && sudo apt-get install nano -y"
          # ssh -i "$OPSMAN_SSH_KEY" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@"$OPSMAN_HOSTNAME" "$command"
          ssh -i $OPSMAN_SSH_KEY -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@"$OPSMAN_HOSTNAME" "sudo apt-get update"
